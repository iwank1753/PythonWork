# Даны два неупорядоченных набора целых чисел (может быть, с повторениями). Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. Затем пользователь вводит сами элементы множеств.

# def find_common_elements(n, m):
#     set_1 = set()
#     set_2 = set()

#     print("Введите элементы первого множества:")
#     for i in range(n):
#         element = int(input())
#         set_1.add(element)

#     print("Введите элементы второго множества:")
#     for i in range(m):
#         element = int(input())
#         set_2.add(element)

#     common_elements = sorted(set_1.intersection(set_2))
#     return common_elements

# # Ввод количества элементов для двух множеств
# n = int(input("Введите количество элементов первого множества: "))
# m = int(input("Введите количество элементов второго множества: "))

# common_elements = find_common_elements(n, m)
# print("Общие элементы в обоих множествах, без повторений и в порядке возрастания:")
# print(common_elements)

# В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль, находясь перед некоторым кустом заданной во входном файле грядки.

# def max_collected_berries(berries):
#     n = len(berries)
#     max_berries = 0

#     for i in range(n):
#         collected_berries = berries[i] + berries[(i - 1) % n] + berries[(i + 1) % n]
#         max_berries = max(max_berries, collected_berries)

#     return max_berries

# # Чтение числа кустов и их урожайности из входного файла
# with open("input.txt", "r") as file:
#     n = int(file.readline().strip())
#     berries = list(map(int, file.readline().split()))

# # Вычисление максимального числа собранных ягод собирающим модулем
# result = max_collected_berries(berries)

# # Запись результата в выходной файл
# with open("output.txt", "w") as file:
#     file.write(str(result))
