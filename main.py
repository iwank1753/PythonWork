# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом.
# Определите минимальное число монеток, которые нужно перевернуть, чтобы все монетки были повернуты вверх одной и той же стороной. 
# Выведите минимальное количество монет, которые нужно перевернуть.

# N = int(input('Введите количество монет: '))
# orel = reshka = 0
# for i in range(N):
#     x = int(input('Орел(1) или решка(0)? '))
#     if x == 1:
#         orel += 1
#     else:
#         reshka += 1
# if orel < reshka:
#     print(f'Переверните {orel} монет с орла на решку, их меньше всего')
# elif orel == reshka:
#     print(f'Количество орлов и решек одинаково, по {orel} штук')
# else:
#     print((f'Переверните {reshka} монет с решки на орла, их меньше всего'))

 # Задача 12: Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P.
# Помогите Кате отгадать задуманные Петей числа.
# 4 4 -> 2 2
# 5 6 -> 2 3

# def find_numbers(S, P):
#     for X in range(1, 1001):
#         for Y in range(1, 1001):
#             if X + Y == S and X * Y == P:
#                 return X, Y
#     return None
# print(find_numbers(4, 4))  # Должно вывести: (2, 2)
# print(find_numbers(5, 6))  # Должно вывести: (2, 3)

# Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числа N.
   
# def powers_of_two(N):
#     power = 1
#     result = []
#     while power <= N:
#         result.append(power)
#         power *= 2
#     return result

# # Пример использования:
# N = 100
# print(powers_of_two(N))  # Должно вывести: [1, 2, 4, 8, 16, 32, 64]







